# .NET Core Function App to Windows on Azure
# Build a .NET Core function app and deploy it to Azure as a Windows function App.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/languages/dotnet-core

trigger: none
# - master

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: 'SCPenco'

  # Function app name
  functionAppName: 'FiDelApp'

  # Agent VM image name
  vmImageName: 'windows-2019'

  # Working Directory
  workingDirectory: '$(System.DefaultWorkingDirectory)/'

parameters:
- name: BuildAndDeploy
  displayName: Build And Deploy Azure function
  type: boolean
  default: false
- name: JMeter
  displayName: Run JMeter test
  type: boolean
  default: true
- name: ChatGPT
  displayName: Run ChatGPT analysis
  type: boolean
  default: true


stages:
- stage: BuildAndDeploy
  condition: eq('${{ parameters.BuildAndDeploy }}', 'true')
  displayName: Build and Deploy stage

  jobs:
  - job: Restore
    displayName: Restore
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: DotNetCoreCLI@2
      displayName: Restore
      inputs:
        command: 'restore'
        projects: |
          $(workingDirectory)/*.csproj

  - job: Build
    displayName: Build
    dependsOn: Restore
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: 'build'
        projects: |
          $(workingDirectory)/*.csproj
        arguments: --output $(System.DefaultWorkingDirectory)/publish_output --configuration Release

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/publish_output'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop

  - deployment: Deploy
    displayName: Deploy
    dependsOn: Build
    environment: 'development'
    pool:
      vmImage: $(vmImageName)

    strategy:
      runOnce:
        deploy:

          steps:
          - task: AzureFunctionApp@1
            displayName: 'Azure functions app deploy'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: functionApp
              appName: $(functionAppName)
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'


# - stage: JMeterTest
#   displayName: JMeter Test stage
#   # dependsOn: BuildAndDeploy
#   condition: eq('${{ parameters.JMeter }}', 'true')
#   # condition: and(succeeded(), eq('${{ parameters.JMeter }}', 'true'))

#   jobs:
#   - template: JMeter.yml@templates
#     parameters:
#       threads: '25'
#       rampup: '1'
#       loops: '2'

# - stage: ChatGPT
#   displayName: ChatGPT stage
#   # dependsOn: JMeterTest
#   # condition: and(succeeded(), eq('${{ parameters.ChatGPT }}', 'true'))
#   condition: eq('${{ parameters.ChatGPT }}', 'true')

#   jobs:
#   - template: ChatGPT.yml@templates
#     parameters:
#       tokens: '20000'
#       temperature: '0.7'
#       apiKey: $(ApiKey-GPT4-32)
#       apiUrl: $(ApiUrlGPT4-32)
#       EmailUsernameRecipient: $(EmailUsernameRecipient)
#       EmailPassword: $(EmailPassword)
#       EmailUsername: $(EmailUsername)
#       EmailAPIKEY: $(EmailAPIKEY)
#       caption: "FiDelApp Message"
#       chatid: "549538016"
#   variables:
#   - group: MySecrets
#   - group: OpenAI

- stage: JMeterTest  
  condition: always()
  displayName: JMeter Test stage  
  jobs:  
  - template: JMeter.yml@templates  
    parameters:  
      threads: '100'  
      rampup: '1'    
      loops: '100'
  
  
- stage: ChatGPT
  condition: always()
  displayName: ChatGPT stage
  jobs:  
  - template: ChatGPT.yml@templates  
    parameters:  
      tokens: '14000'  
      temperature: '0.7'  
      model: 'GPT4'
      workingDir: $(workingDirectory)
      caption: '100th100u14ktGPt4-PostAPI-np'
      chatid: '549538016'
      azSubscription: 'SCPenco'

resources:
  repositories:
    - repository: templates
      type: github
      name: apencoreply/DevOpsEmpowerTool
      endpoint: devopsempowertool