
stages:
- stage: ChatGPT
  displayName: ChatGPT stage
  dependsOn: JMeterTest
  condition: succeeded()

  jobs:
  - job: Chat
    displayName: ChatGPT
    pool:
      vmImage: $(vmImageName)
    
    steps:
    - task: DownloadPipelineArtifact@2
      displayName: 'Download JTL Results Artifact'
      inputs:
        artifactName: 'JTLResults'
        targetPath: '$(System.DefaultWorkingDirectory)'
      
    - task: PowerShell@2
      displayName: 'Prepare JTL Results and Function Code'
      inputs:
        targetType: 'inline'
        script: |
          echo "Function Code:"
          cat $(System.DefaultWorkingDirectory)/*.cs
          cat $(System.DefaultWorkingDirectory)/*.cs > $(System.DefaultWorkingDirectory)/function_code.txt
          echo "JTL Results:"
          cat $(System.DefaultWorkingDirectory)/test_summary.jtl
          cat $(System.DefaultWorkingDirectory)/test_summary.jtl > $(System.DefaultWorkingDirectory)/jtl_results.txt

    - task: PowerShell@2
      displayName: 'List contents of DefaultWorkingDirectory'
      inputs:
        targetType: 'inline'
        script: |
          $directory = "$(System.DefaultWorkingDirectory)"
          Get-ChildItem -Path $directory

    - task: PowerShell@2
      displayName: 'Call ChatGPT API'
      inputs:
        targetType: 'inline'
        script: |
          $jtlResultsFile = "$(System.DefaultWorkingDirectory)/jtl_results.txt"
          $functionCodeFile = "$(System.DefaultWorkingDirectory)/function_code.txt"
          $apiKey = "4c7be06a162641039767063e4830a371"
          $apiUrl = "https://apchatgpt.openai.azure.com/openai/deployments/gpt-chat/chat/completions?api-version=2023-03-15-preview"

          # Read JTL results
          $jtlResults = Get-Content -Path $jtlResultsFile

          # Read function code
          $functionCode = Get-Content -Path $functionCodeFile

          # Prepare payload for API request
           $payload = @{
              messages = @(
                @{ role = 'system'; content = 'You are a system that analyzes source code and JMeter results to assist any type of developer in enhancing and improving performance in the code.' },
                @{ role = 'user'; content = "Provide me exmaple on how could imporve the Function code, dased on Function code and JTL Results:\n----\nJTL Results:\n---\n$jtlResults\n---\nFunction Code:\n---\n$functionCode\n---\n----"}
              )
              temperature = 0.7
              max_tokens = 1000
          }
          $payloadJson = $payload | ConvertTo-Json

          # Make API request
          $headers = @{
              "Content-Type" = "application/json"
              "api-key" = $apiKey
          }
          $response = Invoke-RestMethod -Uri $apiUrl -Headers $headers -Method Post -Body $payloadJson
          # Process the API response as needed
          # For example, extract and utilize the generated text
          $generatedText = $response.choices[0].message.content

          # Display the generated text
          Write-Host $generatedText

          $generatedText | Out-File "$(System.DefaultWorkingDirectory)/generatedText.txt" -Encoding utf8

    - task: PowerShell@2
      displayName: 'Send Telegram Notification'
      inputs:
        targetType: 'inline'
        script: |
          $telegramBotToken = '6096186625:AAHcTptWfiK5CIAmSEcmjEtpfJA1oiKGR_Q'
          $chatId = '549538016'
          $generatedText = Get-Content -Path "$(System.DefaultWorkingDirectory)/generatedText.txt"
          $message = @"
          The pipeline has completed successfully.
          Generated Text:
          ---
          $generatedText
          ---
          "@

          $uri = "https://api.telegram.org/bot$telegramBotToken/sendMessage"
          $body = @{
              chat_id = $chatId
              text = $message
          } | ConvertTo-Json

          Invoke-RestMethod -Uri $uri -Method Post -Body $body -ContentType 'application/json'
