# .NET Core Function App to Windows on Azure
# Build a .NET Core function app and deploy it to Azure as a Windows function App.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: 'ed7d4ce5-655e-4eb0-819b-8774720c7d08'

  # Function app name
  functionAppName: 'FiDelApp'

  # Agent VM image name
  vmImageName: 'windows-2019'

  # Working Directory
  workingDirectory: '$(System.DefaultWorkingDirectory)/'

stages:
- stage: Build
  displayName: Build stage

  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: 'build'
        projects: |
          $(workingDirectory)/*.csproj
        arguments: --output $(System.DefaultWorkingDirectory)/publish_output --configuration Release

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/publish_output'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded()

  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: 'development'
    pool:
      vmImage: $(vmImageName)

    strategy:
      runOnce:
        deploy:

          steps:
          - task: AzureFunctionApp@1
            displayName: 'Azure functions app deploy'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: functionApp
              appName: $(functionAppName)
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'

- stage: Test
  displayName: Test stage
  dependsOn: Deploy
  condition: succeeded()

  jobs:
  - job: Test
    displayName: Test
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: PowerShell@2
      displayName: 'Install Apache JMeter'
      inputs:
        targetType: 'inline'
        script: |
          $jmeterZipUrl = 'https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.5.zip'
          $jmeterZipPath = '$(System.DefaultWorkingDirectory)/jmeter.zip'
          $jmeterExtractPath = '$(System.DefaultWorkingDirectory)/jmeter'

          Invoke-WebRequest -Uri $jmeterZipUrl -OutFile $jmeterZipPath
          Expand-Archive -Path $jmeterZipPath -DestinationPath $jmeterExtractPath -Force
    
    - script: |
        $(System.DefaultWorkingDirectory)/jmeter/apache-jmeter-5.5/bin/jmeter -n -t $(System.DefaultWorkingDirectory)/*.jmx -l $(System.DefaultWorkingDirectory)/test_summary.jtl
      displayName: 'Run JMeter Test'
      
      # -Jthreads=100
    - script: |
        cat $(System.DefaultWorkingDirectory)/test_summary.jtl
      displayName: 'Explore results'

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)/test_summary.jtl'
        artifact: 'JTLResults'

- stage: Chat
  displayName: ChatGPT stage
  dependsOn: Test
  condition: succeeded()

  jobs:
  - job: Chat
    displayName: ChatGPT
    pool:
      vmImage: $(vmImageName)
    
    steps:
    - script: |
        dir $(System.DefaultWorkingDirectory)
      displayName: 'List Contents of Default Working Directory'

    - task: DownloadPipelineArtifact@2
      displayName: 'Download JTL Results Artifact'
      inputs:
        artifactName: 'JTLResults'
        targetPath: '$(System.DefaultWorkingDirectory)'
      
    - task: PowerShell@2
      displayName: 'Prepare JTL Results and Function Code'
      inputs:
        targetType: 'inline'
        script: |
          echo "Function Code:"
          cat $(System.DefaultWorkingDirectory)/*.cs
          cat $(System.DefaultWorkingDirectory)/*.cs > $(System.DefaultWorkingDirectory)/function_code.txt
          echo "JTL Results:"
          cat $(System.DefaultWorkingDirectory)/test_summary.jtl
          cat $(System.DefaultWorkingDirectory)/test_summary.jtl > $(System.DefaultWorkingDirectory)/jtl_results.txt

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)/function_code.txt'
        artifact: 'FunctionCodetxt'
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)/function_code.txt'
        artifact: 'JTLResultstxt'
    
    - script: |
        dir $(System.DefaultWorkingDirectory)
      displayName: 'List Contents of Default Working Directory'

    - script: |
        dir $(Pipeline.Workspace)
      displayName: 'List Contents of Pipeline Workspace Directory'
    - task: PowerShell@2
      displayName: 'Call ChatGPT API'
      inputs:
        targetType: 'inline'
        script: |
          $jtlResultsFile = "$(Pipeline.Workspace)/jtl_results.txt"
          $functionCodeFile = "$(Pipeline.Workspace)/function_code.txt"
          $apiKey = "4c7be06a162641039767063e4830a371"
          $apiUrl = "https://apchatgpt.openai.azure.com/openai/deployments/gpt-chat/chat/completions?api-version=2023-03-15-preview"

          # Read JTL results
          $jtlResults = Get-Content -Path $jtlResultsFile

          # Read function code
          $functionCode = Get-Content -Path $functionCodeFile

          # Prepare payload for API request
           $payload = @{
              messages = @(
                @{ role = 'system'; content = 'You are a system that analyzes source code and JMeter results to assist any type of developer in enhancing and improving performance in the code.' },
                @{ role = 'user'; content = $jtlResults },
                @{ role = 'user'; content = $functionCode }
              )
              temperature = 0.7
              max_tokens = 100
          }
          $payloadJson = $payload | ConvertTo-Json

          # Make API request
          $headers = @{
              "Content-Type" = "application/json"
              "Authorization" = "Bearer $apiKey"
          }
          $response = Invoke-RestMethod -Uri $apiUrl -Headers $headers -Method Post -Body $payloadJson

          # Process the API response as needed
          # (e.g., extract and utilize the generated text)

          # Example: Print the API response
          Write-Host $response